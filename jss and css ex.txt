JAVASCRIPT
// Step 1: Grab necessary elements
const loanAmountInput = document.getElementById('loan-amount');
const interestRateInput = document.getElementById('interest-rate');
const repayTimeInput = document.getElementById('repay-time');
const calculateButton = document.querySelector('.calculate');
const errorMessage = document.getElementById('error-message');
const throbber = document.getElementById('throbber');
const repaymentPlan = document.getElementById('repayment-plan');
const monthlyPaymentOutput = document.getElementById('monthly-payment');
const totalPaymentOutput = document.getElementById('total-payment');
const totalInterestOutput = document.getElementById('total-interest');

// Initially hide the error message and repayment plan section
errorMessage.style.display = 'none';
throbber.style.display = 'none';
repaymentPlan.style.display = 'none';

// Step 2: Add event listener to calculate button
calculateButton.addEventListener('click', function () {
    // Reset any previous error messages and hide repayment plan if there was an error
    errorMessage.style.display = 'none';
    repaymentPlan.style.display = 'none';  // Hide the repayment section if error is triggered

    // Get the values from the input fields
    const loanAmount = parseFloat(loanAmountInput.value);
    const interestRate = parseFloat(interestRateInput.value);
    const repayTime = parseInt(repayTimeInput.value);

    // Validate the input
    if (isNaN(loanAmount) || loanAmount <= 0 || isNaN(interestRate) || interestRate <= 0 || isNaN(repayTime) || repayTime <= 0) {
        // Show the error message
        errorMessage.style.display = 'block';  

        // Hide the error message after 2 seconds
        setTimeout(function () {
            errorMessage.style.display = 'none';
        }, 2000);

        return;
    }

    // If valid, show the throbber and start calculations
    throbber.style.display = 'block';
    repaymentPlan.style.display = 'none';  // Hide results while calculating

    // Simulate a delay for the throbber effect (e.g., 1 second delay)
    setTimeout(function () {
        throbber.style.display = 'none';  // Hide throbber after "calculations"
        calculateLoan(loanAmount, interestRate, repayTime);  // Perform loan calculations
    }, 1000);
});

// Step 3: Calculate loan details
function calculateLoan(loanAmount, interestRate, repayTime) {
    // Convert annual interest rate to monthly and years to months
    const monthlyInterestRate = interestRate / 100 / 12;
    const totalMonths = repayTime * 12;

    // Monthly Payment Formula
    const monthlyPayment = loanAmount * monthlyInterestRate * Math.pow((1 + monthlyInterestRate), totalMonths) /
        (Math.pow((1 + monthlyInterestRate), totalMonths) - 1);

    // Total Payment
    const totalPayment = monthlyPayment * totalMonths;

    // Total Interest
    const totalInterest = totalPayment - loanAmount;

    // Display the results
    monthlyPaymentOutput.value = monthlyPayment.toFixed(2);
    totalPaymentOutput.value = totalPayment.toFixed(2);
    totalInterestOutput.value = totalInterest.toFixed(2);

    // Show the repayment plan section
    repaymentPlan.style.display = 'block';
}














CSS
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;500;600&display=swap');





* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Nunito", 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: 1em;
}

:root {
    --bacode-gray: #2f4f4f;
    --bacode-white: #ffff;
    --bacode-black: #000;
}

body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: var(--bacode-gray);
    font-size: 1em;
}

.loan-calculator {
    background-color: #fff;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 40%;
    text-align: center;
    position: relative;
    margin-top: -6rem;
}

.loan-calculator h2 {
    margin-bottom: 20px;
    font-size: 1.3rem;
}

.input-group {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    position: relative;
    font-size: 0.7rem;
}

.input-group label {
    background-color: #388585;
    color: white;
    padding: 0.67rem;
    border-top-left-radius: 5px;
    border-bottom-left-radius: 5px;
}

.repay {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    position: relative;
    font-size: 0.7rem;
}

.repay input {
    border-radius: 5px;
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
}

.input-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-left: 0;
    border-radius: 0 5px 5px 0;
   
}


button.calculate {
    background-color: var(--bacode-gray);
    color: white;
    padding: 10px;
    border: none;
    border-radius: 5px;
    width: 100%;
    cursor: pointer;
    transition: font-weight 0.2s ease-in;
}

button.calculate:hover {
    opacity: 0.95;
    font-weight: bold; /* Thicker font-weight when hovered */
}

/* Hidden until shown on error */
.error-message {
    background-color: #f6baba;
    color: black;
    padding: 10px;
    margin-bottom: 15px;
    border-radius: 5px;
    display: none;
    font-size: 0.8rem;
}

/* Hidden elements to be revealed */
.hidden {
    display: none;
}

/* Repayment plan section */
#repayment-plan {
    text-align: left;
    display: none;
}

#repayment-plan h3 {
    text-align: center;
    margin-bottom: 15px;
    margin-top: 15px;
}

.output-group {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
    position: relative;
    font-size: .8rem;
}

.output-group label {
    background-color: #388585;
    color: white;
    padding: 0.68rem;
    border-top-left-radius: 5px;
    border-bottom-left-radius: 5px;
    white-space: nowrap; /* Prevents the label from wrapping */
    overflow: hidden; /* Hides the overflow if the text is too long */
    text-overflow: ellipsis; /* Adds '...' if the text is cut off */
    width: 32%; /* Adjust as necessary to ensure labels don't overflow */
    display: inline-block; /* Ensures the label acts as a block element but only takes as much space as its content */

}

.output-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-left: 0;
    border-radius: 0 5px 5px 0;
   
}

/* Throbber styling */
.throbber {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #2b675d;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    margin: 20px auto;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Hides arrows in input fields for all browsers */
input[type=number]::-webkit-inner-spin-button, 
input[type=number]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
}
